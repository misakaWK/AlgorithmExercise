
//爬楼梯，一次只能爬一阶或两阶，采用动态规划思想，设f(x)代表爬x阶楼梯的方案数，那么可知状态转移方程为：f(x)=f(x-1)+f(x-2)
由此用r代表最终x阶方案数，通过滚动数组思想将空间复杂度降为O（1）,因为从0级开始爬，f(0)=1,f(1)=1,由此滚动赋值，可以求得f(x)
class Solution {
public:
    int climbStairs(int n) {
        int p,q,r;
        p=q=0;
        r=1;
        for(int i=1;i<=n;i++)
        {
            p=q;
            q=r;
            r=p+q;
        }
        return r;

    }
};
//对于较大的n，这个算法有些不太够，可以采用矩阵快速幂方法解决
思路，见：https://leetcode.cn/problems/climbing-stairs/solutions/286022/pa-lou-ti-by-leetcode-solution/


class Solution {
public:
    vector<vector<long long>> multiply(vector<vector<long long>> &a, vector<vector<long long>> &b) {
        vector<vector<long long>> c(2, vector<long long>(2));
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];
            }
        }
        return c;
    }

    vector<vector<long long>> matrixPow(vector<vector<long long>> a, int n) {
        vector<vector<long long>> ret = {{1, 0}, {0, 1}};
        while (n > 0) {
            if ((n & 1) == 1) {
                ret = multiply(ret, a);
            }
            n >>= 1;
            a = multiply(a, a);
        }
        return ret;
    }

    int climbStairs(int n) {
        vector<vector<long long>> ret = {{1, 1}, {1, 0}};
        vector<vector<long long>> res = matrixPow(ret, n);
        return res[0][0];
    }
};
